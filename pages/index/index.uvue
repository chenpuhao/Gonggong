<template>
  <view class="container">
    <view class="service-cards">
      <view class="service-card" @click="navigateTo('/pages/classroom/index')">
        <image class="service-icon" src="/static/images/classroom.png"></image>
        <text class="service-name">空教室</text>
      </view>
      <view class="service-card" @click="navigateTo('/pages/grades/index')">
        <image class="service-icon" src="/static/images/trophy.png"></image>
        <text class="service-name">查成绩</text>
      </view>
      <view class="service-card" @click="navigateTo('/pages/schedule/index')">
        <image class="service-icon" src="/static/images/calendar.png"></image>
        <text class="service-name">课程表</text>
      </view>
    </view>

    <!-- 将标签导航独立于卡片容器 -->
    <view class="tabs-wrapper">
      <view class="tab-header">
        <view class="tab-item" :class="{ active: currentTab === 'schedule' }" @click="switchTab('schedule')">
          <text class="tab-text">课程表</text>
          <view class="tab-indicator"></view>
        </view>
        <view class="tab-divider"></view>
        <view class="tab-item" :class="{ active: currentTab === 'countdown' }" @click="switchTab('countdown')">
          <text class="tab-text">倒计时</text>
          <view class="tab-indicator"></view>
        </view>
      </view>
    </view>

    <!-- 课程表内容 -->
    <view class="tab-container" v-if="currentTab === 'schedule'">
      <view class="schedule-content">
        <view class="schedule-header">
          <view class="date-circle">
            <text class="date-number">{{todayLessons}}</text>
          </view>
          <view class="date-info">
            <text class="date-day">TUE.</text>
            <text class="date-lessons">今日共{{todayLessons}}节课</text>
          </view>
          <view class="semester-info">
            <text class="date-full">{{currentDate}}</text>
            <text class="week-info">第{{currentWeek}}周</text>
          </view>
        </view>

        <view class="schedule-body" v-if="todayLessons > 0">
          <!-- 课程列表 -->
        </view>
        <view class="empty-schedule" v-else>
          <view class="piggy-svg">
            <image src="/static/images/noCourse.png"></image>
          </view>
          <text class="empty-text">今天没有课哟~</text>
        </view>
      </view>
    </view>

    <!-- 倒计时内容区域 -->
    <view class="tab-container" v-if="currentTab === 'countdown'">
      <!-- 固定部分：添加倒计时按钮和筛选 -->
      <view class="countdown-header">
        <view class="add-btn" @click="addCountdown">
          <text class="add-icon">+</text>
          <text class="add-text">添加倒计时</text>
        </view>
        <view class="filter">
          <view class="filter-item" @click="toggleFilter">
            <view class="circle" :class="{ checked: onlyExams }"></view>
            <text class="filter-text">仅考试</text>
          </view>
        </view>
      </view>

      <!-- 分割线 -->
      <view class="divider"></view>

      <!-- 倒计时列表部分 -->
      <scroll-view class="countdown-scroll" scroll-y="true" @scroll="resetOthers">
        <view class="countdown-list">
          <view v-for="(exam, index) in examList" :key="index" class="countdown-wrapper">
            <view class="countdown-content" :style="{ transform: `translateX(${examSwipeState[index] || 0}px)` }">
              <view class="countdown-item" @touchstart="touchStart($event, index)" @touchend="touchEnd($event, index)">
                <!-- 考试内容 -->
                <view class="exam-info">
                  <view class="exam-title-row">
                    <text class="exam-title">{{exam.title}}</text>
                    <view class="exam-tag"><text>{{exam.type}}</text></view>
                  </view>
                  <view class="exam-time">
                    <text class="time-icon">🕒</text>
                    <text class="time-text">{{exam.date}} {{exam.weekday}}</text>
                    <text class="location-icon" style="margin-left: 15rpx">📍</text>
                    <text class="location-text">{{exam.location}}</text>
                  </view>
                </view>
                <view class="countdown-days">
                  <text class="days-text">还剩</text>
                  <text class="days-number">{{exam.daysLeft}}</text>
                  <text class="days-unit">天</text>
                </view>
              </view>
              <view class="action-buttons">
                <view class="pin-btn" @click="pinItem(index)">
                  <view class="btn-inner">
                    <text class="pin-icon">📌</text>
                    <text class="btn-text">置顶</text>
                  </view>
                </view>
                <view class="delete-btn" @click="deleteItem(index)">
                  <view class="btn-inner">
                    <text class="delete-icon">🗑️</text>
                    <text class="btn-text">删除</text>
                  </view>
                </view>
              </view>
            </view>
          </view>
        </view>
      </scroll-view>
    </view>


    <view class="tab-bar">
      <view class="tab-bar-item active">
        <image class="tab-bar-icon" src="/static/images/home-active.png"></image>
        <text class="tab-bar-text">首页</text>
      </view>
      <view class="tab-bar-item" @click="switchPage('info')">
        <image class="tab-bar-icon" src="/static/images/user.png"></image>
        <text class="tab-bar-text">我的</text>
      </view>
    </view>
  </view>
</template>

<script>
import info from "@/pages/index/info.uvue";

export default {
  computed: {
    info() {
      return info
    }
  },
  data() {
    return {
      currentTab: 'countdown',
      todayLessons: 0,
      currentDate: '2025/05/13',
      currentWeek: '13',
      currentPage: 'index',
      onlyExams: true,
      // 添加左滑相关的变量
      swipeDistance: 0,
      isVisible: false,
      examList: [
        {
          title: '数据结构',
          type: '考试',
          date: '2025/06/09 19:30-21:30',
          weekday: '星期一',
          location: '计算中心B307',
          daysLeft: 24
        },
        {
          title: '离散数学',
          type: '考试',
          date: '2025/06/12 10:30-12:30',
          weekday: '星期四',
          location: '尚美楼二阶梯',
          daysLeft: 27
        },
        {
          title: '计算机组成与体系结构',
          type: '考试',
          date: '2025/06/16 10:30-12:30',
          weekday: '星期一',
          location: '北山二阶梯',
          daysLeft: 31
        },
        {
          title: '大学外语2',
          type: '考试',
          date: '2025/06/19 14:00-16:00',
          weekday: '星期四',
          location: '逸夫楼二阶',
          daysLeft: 34
        },
        {
          title: '国家安全教育',
          type: '考试',
          date: '2025/06/19 16:30-18:30',
          weekday: '星期四',
          location: '逸夫楼一阶',
          daysLeft: 34
        }
      ],
      examSwipeState: {},
      startX: 0,
      currentIndex: null,
      isSwiping: false
    }
  },
  onLoad() {
    this.getCurrentDate();
    this.getExamData();
  },
  methods: {
    // 获取考试数据
    async getExamData() {
      try {
        // 这里将来会调用实际的API
        // const response = await uni.request({ url: 'your-exam-api-endpoint' });
        // this.examList = response.data;

        // 现在使用预设的模拟数据
      } catch (error) {
        uni.showToast({
          title: '获取考试数据失败',
          icon: 'none'
        });
      }
    },

    // 重置其他条目
    resetOthers(e) {
      // 滚动时重置所有滑动状态
      if (!this.isSwiping && Object.keys(this.examSwipeState).length > 0) {
        this.examSwipeState = {};
      }
    },

    // 滑动变化事件处理
    touchStart(e, index) {
      this.startX = e.changedTouches[0].clientX;
      this.currentIndex = index;
      this.isSwiping = true;

      // 如果点击了一个新的条目，先重置其他所有条目
      Object.keys(this.examSwipeState).forEach(key => {
        if (Number(key) !== index && this.examSwipeState[key] !== 0) {
          this.$set(this.examSwipeState, key, 0);
        }
      });
    },

    // 触摸结束事件
    touchEnd(e, index) {
      const endX = e.changedTouches[0].clientX;
      const distance = endX - this.startX;

      // 左滑显示操作按钮，仅显示刚好能展示两个按钮的宽度
      if (distance < -50) {
        // 每个按钮宽度为120rpx，共240rpx，转换为px大约为120px
        this.$set(this.examSwipeState, index, -120);
      }
      // 右滑隐藏操作按钮
      else if (distance > 50 || (distance > -50 && distance < 50 && this.examSwipeState[index] === -120)) {
        this.$set(this.examSwipeState, index, 0);
      }

      this.isSwiping = false;
    },

    // 置顶项目
    pinItem(index) {
      const item = this.examList[index];
      // 移除当前项
      this.examList.splice(index, 1);
      // 添加到顶部
      this.examList.unshift(item);
      // 重置滑动状态
      this.examSwipeState = {};

      uni.showToast({
        title: '已置顶',
        icon: 'none'
      });
    },

    // 删除项目
    deleteItem(index) {
      const item = this.examList[index];
      if (item.type === '考试') {
        uni.showToast({
          title: '考试项目不可删除',
          icon: 'none'
        });
        // 重置该项的滑动状态
        this.$set(this.examSwipeState, index, 0);
        return;
      }

      uni.showModal({
        title: '确认删除',
        content: `确定要删除"${item.title}"吗？`,
        success: (res) => {
          if (res.confirm) {
            this.examList.splice(index, 1);
            // 更新滑动状态，移除已删除项的状态
            const newState = {};
            Object.keys(this.examSwipeState).forEach(key => {
              if (Number(key) < index) {
                newState[key] = this.examSwipeState[key];
              } else if (Number(key) > index) {
                newState[Number(key) - 1] = this.examSwipeState[key];
              }
            });
            this.examSwipeState = newState;

            uni.showToast({
              title: '已删除',
              icon: 'none'
            });
          } else {
            // 取消时重置滑动状态
            this.$set(this.examSwipeState, index, 0);
          }
        }
      });
    },

    // 切换标签页时重置所有滑动状态
    switchTab(tab) {
      this.currentTab = tab;
      // 重置所有滑动状态
      this.examSwipeState = {};
    },

    // 添加倒计时
    addCountdown() {
      uni.showToast({
        title: '添加倒计时功能待实现',
        icon: 'none'
      });
    },

    // 切换筛选器
    toggleFilter() {
      this.onlyExams = !this.onlyExams;
      // 这里可以添加筛选逻辑
    },

    switchPage(page) {
      if (page === this.currentPage) return;

      if (page === 'index') {
        // 如果已经在首页，只需更新状态
        if (getCurrentPages().pop().route === 'pages/index/index') {
          this.currentPage = 'index';
        } else {
          uni.redirectTo({
            url: '/pages/index/index',
            fail: (err) => {
              console.error('页面跳转失败', err);
              uni.showToast({
                title: '页面跳转失败',
                icon: 'none'
              });
            }
          });
        }
      } else if (page === 'info') {
        // 跳转到个人信息页
        uni.navigateTo({
          url: '/pages/index/info',
          success: () => {
            this.currentPage = 'info';
          },
          fail: (err) => {
            console.error('页面跳转失败', err);
            uni.showToast({
              title: '页面跳转失败',
              icon: 'none'
            });
          }
        });
      }
    },

    // 跳转到对应的页面
    navigateTo(url) {
      uni.navigateTo({
        url: url,
        fail: (err) => {
          console.error('页面跳转失败', err);
          uni.showToast({
            title: '页面跳转失败',
            icon: 'none'
          });
        }
      });
    },


    // 获取当前日期
    getCurrentDate() {
      const date = new Date();
      const year = date.getFullYear();
      const month = ('0' + (date.getMonth() + 1)).slice(-2);
      const day = ('0' + date.getDate()).slice(-2);
      this.currentDate = `${year}/${month}/${day}`;
    }
  }
}
</script>

<style>
.container {
  flex-direction: column;
  width: 750rpx;
  background-color: #f5f5f5;
  min-height: 100vh;
}

/* 顶部服务卡片区域 */
.service-cards {
  width: 750rpx;
  height: 330rpx;
  flex-direction: row;
  justify-content: space-around;
  align-items: center;
  background-color: #f66b6b;
  border-radius: 0 0 30rpx 30rpx;
  padding: 60rpx 20rpx 20rpx;
  box-shadow: 0 4rpx 10rpx rgba(0, 0, 0, 0.1);
}

.service-card {
  align-items: center;
  justify-content: center;
  width: 200rpx;
  height: 160rpx;
  margin-top: 50rpx;
}

.service-icon {
  width: 80rpx;
  height: 80rpx;
  margin-bottom: 16rpx;
}

.service-name {
  font-size: 28rpx;
  color: #ffffff;
}

/* 标签导航 */
.tabs-wrapper {
  width: 750rpx;
  margin-top: 30rpx;
  border-bottom: 1rpx solid #f0f0f0;
  background-color: transparent;
}

.tab-header {
  flex-direction: row;
  justify-content: center;
  padding: 20rpx 0;
  position: relative;
  background-color: transparent;
}

.tab-divider {
  position: absolute;
  width: 1rpx;
  height: 30rpx;
  background-color: #f0f0f0;
  top: 50%;
  left: 50%;
  transform: translateY(-50%);
}

.tab-item {
  padding: 0 70rpx;
  align-items: center;
  position: relative;
}

.tab-text {
  font-size: 32rpx;
  color: #666666;
}

.tab-indicator {
  position: absolute;
  bottom: -1rpx;
  height: 6rpx;
  width: 80rpx;
  background-color: #f66b6b;
  border-radius: 3rpx;
  left: 50%;
  transform: translateX(-50%);
  opacity: 0;
}

.tab-item.active .tab-text {
  color: #f66b6b;
  font-weight: bold;
}

.tab-item.active .tab-indicator {
  opacity: 1;
}

/* 内容卡片 */
.tab-container {
  background-color: #ffffff;
  border-radius: 20rpx;
  width: 710rpx;
  margin: 20rpx 20rpx 120rpx 20rpx;
  flex: 1;
  display: flex;
  flex-direction: column;
}

/* 课程表样式 */
.schedule-content {
  padding: 10rpx 0 40rpx 0;
}

.schedule-header {
  flex-direction: row;
  padding: 30rpx;
  align-items: center;
}

.date-circle {
  width: 80rpx;
  height: 80rpx;
  background-color: #f5f5f5;
  border-radius: 40rpx;
  justify-content: center;
  align-items: center;
}

.date-number {
  font-size: 40rpx;
  font-weight: bold;
}

.date-info {
  flex: 1;
  margin-left: 30rpx;
  flex-direction: column;
  justify-content: center;
}

.date-day {
  font-size: 42rpx;
  font-weight: bold;
  color: #ff8a8a;
}

.date-lessons {
  font-size: 28rpx;
  color: #999999;
  margin-top: 5rpx;
}

.semester-info {
  flex-direction: column;
  align-items: flex-end;
}

.date-full {
  font-size: 26rpx;
  color: #333333;
}

.week-info {
  font-size: 24rpx;
  color: #666666;
  margin-top: 5rpx;
}

.empty-schedule {
  align-items: center;
  justify-content: center;
  padding: 50rpx 0;
}

.piggy-svg {
  align-items: center;
  justify-content: center;
  margin: 30rpx 0;
}

.piggy-svg image {
  width: 382rpx;
  height: 256rpx;
  margin-bottom: 30rpx;
}

.empty-text {
  font-size: 30rpx;
  color: #999999;
  margin-bottom: 20rpx;
}

/* 倒计时头部 - 固定部分 */
.countdown-header {
  flex-direction: row;
  justify-content: space-between;
  align-items: center;
  padding: 20rpx 30rpx;
}

.add-btn {
  flex-direction: row;
  align-items: center;
  background-color: #f66b6b;
  border-radius: 30rpx;
  padding: 10rpx 30rpx;
}

.add-icon {
  font-size: 36rpx;
  color: #ffffff;
  margin-right: 8rpx;
}

.add-text {
  font-size: 28rpx;
  color: #ffffff;
}

.filter {
  flex-direction: row;
  align-items: center;
}

.filter-item {
  flex-direction: row;
  align-items: center;
}

.circle {
  width: 36rpx;
  height: 36rpx;
  border-radius: 18rpx;
  border: 2rpx solid #cccccc;
  margin-right: 10rpx;
}

.circle.checked {
  border-color: #f66b6b;
  background-color: #f66b6b;
}

.filter-text {
  font-size: 28rpx;
  color: #666666;
}

/* 分割线 */
.divider {
  height: 1rpx;
  background-color: #f0f0f0;
  width: 100%;
  margin: 10rpx 0;
}

/* 可滚动区域 */
.countdown-scroll {
  flex: 1;
  height: 740rpx; /* 设置适当高度，使列表可滚动 */
}

/* 倒计时列表 */
.countdown-list {
  padding: 10rpx 30rpx;
}

.countdown-item {
  flex-direction: row;
  justify-content: space-between;
  align-items: center;
  padding: 30rpx;
  background-color: #ffffff;
  width: 650rpx;
  border-bottom: 1rpx solid #f0f0f0;
}

.countdown-item:last-child {
  border-bottom: none;
}

.exam-info {
  flex: 1;
  flex-direction: column;
}

.exam-title-row {
  flex-direction: row;
  align-items: center;
  margin-bottom: 10rpx;
}

.exam-title {
  font-size: 34rpx;
  font-weight: bold;
  color: #333;
  margin-right: 15rpx;
}

.exam-tag {
  background-color: #ffc187;
  border-radius: 8rpx;
  padding: 4rpx 12rpx;
}

.exam-tag text {
  font-size: 22rpx;
  color: #ffffff;
}

.exam-time {
  flex-direction: row;
  align-items: center;
}

.time-icon, .location-icon {
  font-size: 24rpx;
  color: #999;
  margin-right: 5rpx;
}

.time-text, .location-text {
  font-size: 24rpx;
  color: #999;
}

.countdown-days {
  flex-direction: row;
  align-items: baseline;
}

.days-text {
  font-size: 26rpx;
  color: #999;
  margin-right: 5rpx;
}

.days-number {
  font-size: 48rpx;
  font-weight: bold;
  color: #f66b6b;
}

.days-unit {
  font-size: 26rpx;
  color: #999;
}

/* 底部导航栏 */
.tab-bar {
  width: 750rpx;
  height: 100rpx;
  background-color: #ffffff;
  flex-direction: row;
  justify-content: space-around;
  align-items: center;
  position: fixed;
  bottom: 0;
  left: 0;
  border-top: 1rpx solid #f0f0f0;
}

.tab-bar-item {
  flex: 1;
  align-items: center;
  justify-content: center;
  position: relative;
}

.tab-bar-icon {
  width: 50rpx;
  height: 50rpx;
  margin-bottom: 5rpx;
}

.tab-bar-text {
  font-size: 24rpx;
  color: #999999;
}

.tab-bar-item.active .tab-bar-text {
  color: #f66b6b;
  font-weight: bold;
}

.tab-bar-item.active::after {
  content: "";
  position: absolute;
  bottom: 0;
  left: 50%;
  transform: translateX(-50%);
  width: 70rpx;
  height: 4rpx;
  background-color: #f66b6b;
  border-radius: 2rpx;
}

.countdown-wrapper {
  width: 100%;
  overflow: hidden;
  margin-bottom: 2rpx;
}

.countdown-content {
  width: 830rpx;
  flex-direction: row;
  position: relative;
  transition: transform 0.2s ease;
}

.movable-area {
  width: 890rpx;
  height: 160rpx;
  position: relative;
}

.movable-view {
  width: 650rpx;
  height: 100%;
  z-index: 2;
}

.action-buttons {
  flex-direction: row;
  height: 100%;
  width: 240rpx;
}

.pin-btn, .delete-btn {
  width: 120rpx;
  height: 100%;
  align-items: center;
  justify-content: center;
}

.pin-btn {
  background-color: #81c8ff;
}

.delete-btn {
  background-color: #ff8a8a;
}

.btn-inner {
  flex-direction: column;
  align-items: center;
  justify-content: center;
}

.pin-icon, .delete-icon {
  font-size: 36rpx;
  color: #ffffff;
  margin-bottom: 8rpx;
}

.btn-text {
  font-size: 24rpx;
  color: #ffffff;
}

</style>